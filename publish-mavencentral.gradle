apply plugin: 'maven'
apply plugin: 'signing'

def getRepositoryUrl() {
    def repo = NEXUS_RELEASES

    if (LIB_IS_LOCAL_REPO != null && LIB_IS_LOCAL_REPO.toBoolean()) {
        repo = getMavenHome()
    } else if (LIB_IS_RELEASE != null && !LIB_IS_RELEASE.toBoolean()) {
        repo = NEXUS_SNAPSHOTS
    }

    return repo
}

def getVersionCode() {
    return LIB_VERSION_CODE
}

def getVersionName() {
    def version = LIB_VERSION_NAME

    if (LIB_IS_RELEASE != null && !LIB_IS_RELEASE.toBoolean()) {
        version = version + "-SNAPSHOT"
    }

    return version
}

static def getMavenHome() {
    return 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
    options {
        failOnError false
        encoding "UTF-8"
        charSet "UTF-8"
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
signing {
    sign configurations.archives
}

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            def _aar_version = getVersionName()
            def _repository_url = getRepositoryUrl()
            println "[" + project.getName() + "] Repository: " + _repository_url
            println "[" + project.getName() + "] AAR: " + LIB_GROUP + ":" + LIB_ARTIFACT + ":" + _aar_version
            repository(url: _repository_url) {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name = LIB_ARTIFACT
                // If your project has a dedicated site, use its URL here
                url = LIB_SITE_URL
                groupId LIB_GROUP
                artifactId LIB_ARTIFACT
                version _aar_version
                packaging LIB_EXTENSION
                description LIB_DES
                scm {
                    //修改成你的Git地址：
                    connection = SCM_CONNECTION
                    developerConnection = SCM_DEVELOPER_CONNECTION
                    //分支地址：
                    url = SCM_URL
                }
                licenses {
                    license {
                        //协议类型，一般默认Apache License2.0的话不用改：
                        name = LICENSE_NAME
                        url = LICENSE_URL
                    }
                }
                developers {
                    developer {
                        id = SONATYPE_ID
                        name = SONATYPE_NAME
                        email = SONATYPE_EMAIL
                    }
                }
            }
        }
    }
}